import{_ as d,M as l,p as n,q as r,R as t,t as e,N as s,a1 as i}from"./framework-5866ffd3.js";const h={},c=i('<h1 id="一、git概述" tabindex="-1"><a class="header-anchor" href="#一、git概述" aria-hidden="true">#</a> 一、git概述</h1><h2 id="_1、版本控制" tabindex="-1"><a class="header-anchor" href="#_1、版本控制" aria-hidden="true">#</a> 1、版本控制</h2><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，</p><p>方便版本切换。</p><h2 id="_2、git工作机制和代码托管中心" tabindex="-1"><a class="header-anchor" href="#_2、git工作机制和代码托管中心" aria-hidden="true">#</a> 2、git工作机制和代码托管中心</h2><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。</p><p>局域网</p><ul><li><p>GitLab</p><p>互联网</p></li><li><p>GitHub（外网）</p></li><li><p>Gitee 码云（国内网站）</p></li></ul><h1 id="二、git常用命令" tabindex="-1"><a class="header-anchor" href="#二、git常用命令" aria-hidden="true">#</a> 二、git常用命令</h1><p>官网地址： https://git-scm.com/</p><table><thead><tr><th style="text-align:left;">命令名称</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">git config --global user.name 用户名</td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;">git config --global user.email 邮箱</td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;">git init</td><td style="text-align:left;">初始化本地库</td></tr><tr><td style="text-align:left;">git status</td><td style="text-align:left;">查看本地库状态</td></tr><tr><td style="text-align:left;">git add 文件名</td><td style="text-align:left;">添加到暂存区</td></tr><tr><td style="text-align:left;">git commit -m &quot;日志信息&quot; 文件名</td><td style="text-align:left;">提交到本地库</td></tr><tr><td style="text-align:left;">git reflog</td><td style="text-align:left;">查看历史记录</td></tr><tr><td style="text-align:left;">git log</td><td style="text-align:left;">查看详细版本信息</td></tr><tr><td style="text-align:left;">git reset --hard 版本号</td><td style="text-align:left;">版本穿梭</td></tr></tbody></table><h1 id="三、分支" tabindex="-1"><a class="header-anchor" href="#三、分支" aria-hidden="true">#</a> 三、分支</h1><h2 id="_1、分支的操作" tabindex="-1"><a class="header-anchor" href="#_1、分支的操作" aria-hidden="true">#</a> 1、分支的操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h2 id="_2、代码冲突" tabindex="-1"><a class="header-anchor" href="#_2、代码冲突" aria-hidden="true">#</a> 2、代码冲突</h2><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突：</h3><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><p>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 ======= 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p><ul><li>执行提交（注意：此时使用 git commit 命令时不能带文件名）</li></ul><h1 id="四、远程仓库" tabindex="-1"><a class="header-anchor" href="#四、远程仓库" aria-hidden="true">#</a> 四、远程仓库</h1>',21),g={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},u=i(`<h2 id="_1、远程仓库操作" tabindex="-1"><a class="header-anchor" href="#_1、远程仓库操作" aria-hidden="true">#</a> 1、远程仓库操作</h2><table><thead><tr><th style="text-align:left;">命令名称</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">git remote -v</td><td style="text-align:left;">查看当前所有远程地址别名</td></tr><tr><td style="text-align:left;">git remote add 别名 远程地址</td><td style="text-align:left;">起别名</td></tr><tr><td style="text-align:left;">git push 别名 分支</td><td style="text-align:left;">推送本地分支上的内容到远程仓库</td></tr><tr><td style="text-align:left;">git clone 远程地址</td><td style="text-align:left;">将远程仓库的内容克隆到本地</td></tr><tr><td style="text-align:left;">git pull 远程库地址别名 远程分支名</td><td style="text-align:left;">将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> git pull git-demo master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、跨团队协作" tabindex="-1"><a class="header-anchor" href="#_2、跨团队协作" aria-hidden="true">#</a> 2、跨团队协作</h2><p>将远程仓库的地址复制发给邀请跨团队协作的人</p><p>1、 <strong>GitHub</strong> 账号里的地址栏复制收到的链接，然后点击 <strong>Fork</strong> 将项目叉到自己的本地仓库。</p><p>2、编辑完毕后，填写描述信息并点击左下角绿色按钮提交。</p><p>3、接下来点击上方的 <strong>Pull</strong> <strong>request</strong>请求，并创建一个新的请求。</p><h2 id="_3、ssh免密登录" tabindex="-1"><a class="header-anchor" href="#_3、ssh免密登录" aria-hidden="true">#</a> 3、SSH免密登录</h2><p>我们可以使用SSH进行登录远程仓库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-运行命令生成.ssh秘钥目录[注意：这里-C这个参数是大写的 C]
-rsa是加密协议
-后面跟的是邮箱
ssh -keygen -t rsa -C atguiguyueyue@aliyun.com
cat id_rsa.pub //获取公钥
公钥可以在c盘用户目录下的.ssh中查看
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在github上点击头像--&gt;点击Settings--&gt;SSH and GPG keys</p></li><li><p>点击new SSH key</p></li><li><p>起个名字，之后在下面的key文本框中输入刚才获取的公钥</p></li><li><p>最后可以使用命令：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull ssh路径 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="五、在idea中使用git" tabindex="-1"><a class="header-anchor" href="#五、在idea中使用git" aria-hidden="true">#</a> 五、在Idea中使用git</h1><h2 id="_1、设置git忽略文件" tabindex="-1"><a class="header-anchor" href="#_1、设置git忽略文件" aria-hidden="true">#</a> 1、设置git忽略文件</h2><ul><li>在c盘用户文件下创建git.ignore文本文件，内容填写如下：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Compiled class file
*.class
#Log file
*.log
#BlueJ files
*.ctxt

#Mobile Tools for Java (J2ME)
.mtj.tmp/

#Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

.classpath
.project
.settings
.target

.idea
*.iml

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、设置-gitconfig-和git-ignore在同一个目录下" tabindex="-1"><a class="header-anchor" href="#_2、设置-gitconfig-和git-ignore在同一个目录下" aria-hidden="true">#</a> 2、设置.gitconfig(和git.ignore在同一个目录下)</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[core]
	excludesfile= C:/Users/mrChen/git.ignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、使用idea进行git初始化" tabindex="-1"><a class="header-anchor" href="#_3、使用idea进行git初始化" aria-hidden="true">#</a> 3、使用idea进行git初始化</h2><ul><li>文件红色表示没有添加到暂存区，绿色表示没有提交，正常颜色表示已经提交到本地库，蓝色表示提交过但是被修改了。</li><li>右键项目点击Git可以执行提交操作</li></ul><h2 id="_4、查看版本信息" tabindex="-1"><a class="header-anchor" href="#_4、查看版本信息" aria-hidden="true">#</a> 4、查看版本信息</h2><ul><li>右键相应版本的check可以切换版本</li></ul><h2 id="_5、创建分支" tabindex="-1"><a class="header-anchor" href="#_5、创建分支" aria-hidden="true">#</a> 5、创建分支</h2><h2 id="_6、合并分支" tabindex="-1"><a class="header-anchor" href="#_6、合并分支" aria-hidden="true">#</a> 6、合并分支</h2><h3 id="_1、合并冲突" tabindex="-1"><a class="header-anchor" href="#_1、合并冲突" aria-hidden="true">#</a> 1、合并冲突</h3><ul><li><p>点击Merge</p></li><li><p>点击》或《选择添加那一行代码，中间的是没有冲突的代码。左右时两个分支提交后不一样的代码</p></li></ul><h1 id="六、在idea中使用github" tabindex="-1"><a class="header-anchor" href="#六、在idea中使用github" aria-hidden="true">#</a> 六、在Idea中使用github</h1><p>点击设置进入版本控制，如果没有github在插件里下载github插件</p><p>注：如果使用密码登录会特别的难登录，所以使用token。（不会的可以网上查一下）</p><ul><li><h3 id="上传到github" tabindex="-1"><a class="header-anchor" href="#上传到github" aria-hidden="true">#</a> 上传到github</h3></li><li><h3 id="更改后上传github操作" tabindex="-1"><a class="header-anchor" href="#更改后上传github操作" aria-hidden="true">#</a> 更改后上传github操作</h3></li><li><h3 id="单击分支选择define添加ssh方式-随后push便行" tabindex="-1"><a class="header-anchor" href="#单击分支选择define添加ssh方式-随后push便行" aria-hidden="true">#</a> 单击分支选择define添加ssh方式，随后push便行</h3></li><li><h3 id="pull-github的代码" tabindex="-1"><a class="header-anchor" href="#pull-github的代码" aria-hidden="true">#</a> pull Github的代码</h3></li><li><h3 id="克隆代码" tabindex="-1"><a class="header-anchor" href="#克隆代码" aria-hidden="true">#</a> 克隆代码</h3></li></ul>`,31);function o(b,v){const a=l("ExternalLinkIcon");return n(),r("div",null,[c,t("p",null,[e("GitHub 网址"),t("a",g,[e("："),s(a)]),e("https://github.com/")]),u])}const x=d(h,[["render",o],["__file","git笔记.html.vue"]]);export{x as default};
